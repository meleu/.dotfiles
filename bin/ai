#!/usr/bin/env bash
# shellcheck disable=2155,1091

set -Eeo pipefail

trap '[ERRO] ${BASH_SOURCE}:${FUNCNAME}:${LINENO}' ERR

export SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"

# define your OPENAI_TOKEN inside the .env file
source "${SCRIPT_DIR}/.env" || true

######################################################################
# main function
######################################################################
main() {
  local question="${*:?}"
  local answer

  answer="$(askOpenAI "${question}")"

  echo -e "ðŸ¤– - \e[0;32m${answer}\e[0m\n\n"
  # echo -n "ðŸ¤–"
  # lolcat <<< "${answer}"
}

# askOpenAI
######################################################################
askOpenAI() {
  local question="$(urlencode "$*")"

  curl --silent "https://api.openai.com/v1/completions" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${OPENAI_TOKEN}" \
    -d "{\"model\": \"text-davinci-003\", \"prompt\": \"${question}\", \"max_tokens\": 500}" \
    | jq --exit-status --raw-output '.choices[].text'
}

# shellcheck disable=2059
# urlencode
######################################################################
urlencode() {
  local LC_ALL=C
  local string="$*"
  local length="${#string}"
  local char

  for ((i = 0; i < length; i++)); do
    char="${string:i:1}"
    if [[ "$char" == [a-zA-Z0-9.~_-] ]]; then
      printf "$char"
    else
      printf '%%%02X' "'$char"
    fi
  done
  printf '\n' # opcional
}

#######################################################################

main "$@"
